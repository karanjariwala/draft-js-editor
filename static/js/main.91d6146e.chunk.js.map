{"version":3,"sources":["highlightPlugin.js","App.js","serviceWorker.js","index.js"],"names":["defaultStyle","background","padding","color","highlightPlugin","style","arguments","length","undefined","customStyleMap","HIGHLIGHT","Object","objectSpread","keyBindingFn","e","metaKey","key","handleKeyCommand","command","editorState","_ref","setEditorState","RichUtils","toggleInlineStyle","createHighlightPlugin","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","setState","newState","state","onUnderlineClick","onToggleCode","toggleCode","EditorState","createEmpty","react_default","a","createElement","className","onClick","display","lib_default","plugins","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAEMA,EAAe,CACnBC,WAAY,OACZC,QAAS,SACTC,MAAO,QCCHC,EDES,WAAgB,IAAfC,EAAeC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACtB,MAAO,CACLG,eAAgB,CACdC,UAAYC,OAAAC,EAAA,EAAAD,CAAA,GACPX,EACAK,IAGPQ,aAAc,SAACC,GACb,GAAIA,EAAEC,SAAqB,MAAVD,EAAEE,IACjB,MAAO,aAGXC,iBAAkB,SAACC,EAASC,EAAVC,GAA8C,IAArBC,EAAqBD,EAArBC,eACzC,GAAgB,cAAZH,EAEF,OADAG,EAAeC,YAAUC,kBAAkBJ,EAAa,eACjD,IClBSK,CAAsB,CAC5CvB,WAAY,WAuDCwB,cAnDb,SAAAA,IAAc,IAAAC,EAAA,OAAAf,OAAAgB,EAAA,EAAAhB,CAAAiB,KAAAH,IACZC,EAAAf,OAAAkB,EAAA,EAAAlB,CAAAiB,KAAAjB,OAAAmB,EAAA,EAAAnB,CAAAc,GAAAM,KAAAH,QAMFI,SAAW,SAACb,GACVO,EAAKO,SAAS,CAACd,iBARHO,EAWdT,iBAAmB,SAACC,GAClB,IAAMgB,EAAWZ,YAAUL,iBAAiBS,EAAKS,MAAMhB,YAAaD,GAEpE,OAAGgB,GACDR,EAAKM,SAASE,GACP,WAEF,eAlBKR,EAqBdU,iBAAmB,WACjBV,EAAKM,SAASV,YAAUC,kBAAkBG,EAAKS,MAAMhB,YAAa,eAtBtDO,EAyBdW,aAAe,WACbX,EAAKM,SAASV,YAAUgB,WAAWZ,EAAKS,MAAMhB,eAxB9CO,EAAKS,MAAQ,CACXhB,YAAaoB,cAAYC,eAHfd,wEAgCZ,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQE,QAASjB,KAAKQ,kBAAtB,aACAK,EAAAC,EAAAC,cAAA,UAAQE,QAASjB,KAAKS,cAAtB,cACAI,EAAAC,EAAAC,cAAA,OAAKtC,MAAO,CAACyC,QAAQ,WAArB,wBACAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACfH,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACAvB,YAAaS,KAAKO,MAAMhB,YACxBa,SAAUJ,KAAKI,SACff,iBAAkBW,KAAKX,iBACvB+B,QAAS,CAAC5C,cA3CA6C,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.91d6146e.chunk.js","sourcesContent":["import  { RichUtils } from 'draft-js';\n\nconst defaultStyle = {\n  background: 'blue',\n  padding: '0 .3em',\n  color: '#fff',\n};\n\nexport default (style = {}) => {\n  return {\n    customStyleMap: {\n      'HIGHLIGHT': {\n        ...defaultStyle,\n        ...style,\n      },\n    },\n    keyBindingFn: (e) => {\n      if (e.metaKey && e.key === 'h') {\n        return 'highlight';\n      }\n    },\n    handleKeyCommand: (command, editorState, { setEditorState }) => {\n      if (command === 'highlight') {\n        setEditorState(RichUtils.toggleInlineStyle(editorState, 'HIGHLIGHT'));\n        return true;\n      }\n    },\n  };\n};\n\n","\nimport React, { Component } from 'react';\nimport {  EditorState, RichUtils} from 'draft-js';\nimport Editor from 'draft-js-plugins-editor';\nimport createHighlightPlugin from './highlightPlugin';\n\nconst highlightPlugin = createHighlightPlugin({\n  background: 'purple'\n});\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      editorState: EditorState.createEmpty(),\n    };\n  }\n\n  onChange = (editorState) => {\n    this.setState({editorState})\n  }\n\n  handleKeyCommand = (command) => {\n    const newState = RichUtils.handleKeyCommand(this.state.editorState, command);\n\n    if(newState){\n      this.onChange(newState);\n      return 'handled';\n    }\n    return 'not-handled';\n  }\n\n  onUnderlineClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'UNDERLINE'));\n  }\n\n  onToggleCode = () => {\n    this.onChange(RichUtils.toggleCode(this.state.editorState));\n  }\n\n\n\n  render() {\n    return (\n      <div className='App'>\n        <button onClick={this.onUnderlineClick}>Underline</button>\n        <button onClick={this.onToggleCode}>Code Block</button>\n        <div style={{display:'inline'}} > cmd +h to highlight</div>\n        <div className='Editor'>\n        <Editor\n        editorState={this.state.editorState}\n        onChange={this.onChange}\n        handleKeyCommand={this.handleKeyCommand}\n        plugins={[highlightPlugin]}\n      />\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}